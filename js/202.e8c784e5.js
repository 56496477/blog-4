(window.webpackJsonp=window.webpackJsonp||[]).push([[202],{854:function(n,t){n.exports="### title\n\n[title](https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/description/)\n\n给定一个仅包含数字 2-9 的字符串, 返回所有它能表示的字母组合。\n\n给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。\n\n示例:\n\n```\n输入: \"23\"\n输出: [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n```\n\n说明:\n尽管上面的答案是按字典序排列的, 但是你可以任意选择答案输出的顺序。\n\n### analyze\n\n有点烧脑, 日后再刷遍。\n\n队列的思想。拿 '23' 举例, 第一轮先放进 'abc', 第二轮分别以队列的方式对 a、b、c 分别进行操作 push 进 def。\n\n```js\n/**\n * @param {string} digits\n * @return {string[]}\n */\nvar letterCombinations = function (digits) { // '23'\n  const keyString = [\n    '',\n    '',\n    'abc',\n    'def',\n    'ghi',\n    'jkl',\n    'mno',\n    'pqrs',\n    'tuv',\n    'wxyz',\n  ]\n\n  if (digits === '' || digits.length === 0) {\n    return []\n  }\n\n  const result = ['']\n\n  for (let x of digits) {\n    const size = result.length\n    for (let i = 0; i < size; i++) {\n      const old = result.shift()\n\n      for (let y of keyString[x]) {\n        result.push(old + y)\n      }\n    }\n  }\n  return result\n};\n```"}}]);