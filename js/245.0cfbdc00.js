(window.webpackJsonp=window.webpackJsonp||[]).push([[245],{900:function(n,t){n.exports="### title\n\n给定一个数组 candidates 和一个目标数 target , 找出 candidates 中所有可以使数字和为 target 的组合。\n\ncandidates 中的每个数字在每个组合中只能使用一次。\n\n说明:\n\n所有数字（包括目标数）都是正整数。\n解集不能包含重复的组合。\n示例 1:\n\n```\n输入: candidates = [10,1,2,7,6,1,5], target = 8,\n所求解集为:\n[\n  [1, 7],\n  [1, 2, 5],\n  [2, 6],\n  [1, 1, 6]\n]\n```\n\n示例 2:\n\n```\n输入: candidates = [2,5,2,1,2], target = 5,\n所求解集为:\n[\n  [1,2,2],\n  [5]\n]\n```\n\n### analyze\n\n是[题目 39](https://github.com/MuYunyun/blog/blob/master/LeetCode/39.组合总和/index.js) 的改版, 在 DFS 的基础上, 对于题目要求`解集不能包含重复的组合`要稍加处理。\n\n思路:\n\n1. 对 candidates 排序\n2. 对这种情况要过滤: `i !== start && candidates[i] === candidates[i - 1]`, 可以以 ([1, 1, 2], 3) 这个例子进行思考不产生两个 [1, 2]\n\n```js\n/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum2 = function (candidates, target) {\n  const result = []\n\n  const sortCandidates = candidates.sort((r1, r2) => r1 - r2)\n  const DFS = function (sum, arr, start) {\n    if (sum === target) {\n      result.push(arr.slice())\n      return\n    }\n    if (sum > target) {\n      return\n    }\n\n    for (let i = start; i < sortCandidates.length; i++) {\n      if (i !== start && sortCandidates[i] === sortCandidates[i - 1]) { // [1,1,2], 3 避免产生两个 [1, 2]\n        continue\n      }\n\n      sum += sortCandidates[i]\n      arr.push(sortCandidates[i])\n      DFS(sum, arr, i + 1)\n      arr.pop(sortCandidates[i])\n      sum -= sortCandidates[i]\n    }\n  }\n\n  DFS(0, [], 0)\n\n  return result\n};\n```"}}]);