(window.webpackJsonp=window.webpackJsonp||[]).push([[205],{895:function(n,t){n.exports='### 131.Palindrome Partitioning\n\nGiven a string s, partition s such that every substring of the partition is a palindrome.\n\nReturn `all possible palindrome partitioning` of s.\n\nExample:\n\n```js\nInput: "aab"\nOutput:\n[\n  ["aa","b"],\n  ["a","a","b"]\n]\n```\n\n### Analyze\n\n* a\n  * a\n    * b √\n  * ab\n* aa\n  * b   √\n* aab\n\n```js\n/**\n * @param {string} s\n * @return {string[][]}\n */\nvar partition = function(s) {\n  const result = []\n  partitionSub(s, 0, [], result)\n  return result\n};\n\nvar partitionSub = function(s, start, subResult, result) {\n  if (subResult.join(\'\').length === s.length) {\n    result.push(subResult)\n    return\n  }\n  for (let i = start + 1; i <= s.length; i++) {\n    if (start === 0) {\n      subResult = []\n    }\n    const curSubString = s.slice(start, i)\n    if (ifPalindrome(curSubString)) {\n      subResult.push(curSubString)\n      console.log(\'subResult\', subResult)\n      partitionSub(s, i, subResult, result)\n    } else {\n      continue\n    }\n  }\n}\n\n// judge if it\'s palindrome\nvar ifPalindrome = function(curSubString) {\n  return curSubString === curSubString.split(\'\').reverse().join(\'\')\n}\n```\n\n```js\n输入：\n"cdd"\n输出：\n[["c","d","d","dd"]] // todo: how to remove "d", "d\'\n预期：\n[["c","d","d"],["c","dd"]]\n```'}}]);